name: "Terraform"
on:
  push:
    branches:
    - main
    paths:
    - 'terraform/**'
  pull_request:
    branches:
    - main
    paths:
    - 'terraform/**'

permissions:
  contents: read
  pull-requests: write


jobs:
  terraform:
    container : ubuntu:latest
    runs-on: [self-hosted, linux, x64]
    name: Terraform
    steps:

    - name: Setup environment
      run : apt update -y && apt install -y curl unzip git

    - name: Setup Terraform
      id: setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Fmt
      id: fmt
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: Terraform Init
      id: init
      run: terraform init -upgrade
      working-directory: ./terraform
      env:
        TF_VAR_VSPHERE_USER = ${{ secrets.VSPHERE_USER }}
        TF_VAR_VSPHERE_PASSWORD = ${{ secrets.VSPHERE_PASSWORD }}
        TF_VAR_RANCHER_ACCESS_KEY = ${{ secrets.RANCHER_ACCESS_KEY }}
        TF_VAR_RANCHER_SECRET_KEY = ${{ secrets.RANCHER_SECRET_KEY }}

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color -out tf.plan
      env:
        TF_VAR_VSPHERE_USER = ${{ secrets.VSPHERE_USER }}
        TF_VAR_VSPHERE_PASSWORD = ${{ secrets.VSPHERE_PASSWORD }}
        TF_VAR_RANCHER_ACCESS_KEY = ${{ secrets.RANCHER_ACCESS_KEY }}
        TF_VAR_RANCHER_SECRET_KEY = ${{ secrets.RANCHER_SECRET_KEY }}

    - name: Terraform Show
      id: show
      run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
      env:
        TF_VAR_VSPHERE_USER = ${{ secrets.VSPHERE_USER }}
        TF_VAR_VSPHERE_PASSWORD = ${{ secrets.VSPHERE_PASSWORD }}
        TF_VAR_RANCHER_ACCESS_KEY = ${{ secrets.RANCHER_ACCESS_KEY }}
        TF_VAR_RANCHER_SECRET_KEY = ${{ secrets.RANCHER_SECRET_KEY }}

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const fs = require("fs");
          const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
          const maxGitHubBodyCharacters = 65536;

          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }

          // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
          var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
          for (let i = 0; i < plans.length; i++) {
            const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
            #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${plans[i]}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -input=false tf.plan
      working-directory: ./terraform
      shell: bash
